#pragma once

#include "Semaphore.h"
#include "Event.h"
#include "RunnableThread.h"
#include "Platform/HAL/CriticalSection.h"

// https://blog.csdn.net/zhu2695/article/details/8764816

class PlatformProcess
{
public:
    //线程 ////////////////////////////////////////////////////////////////////////////////////////////////////////
	static RunnableThreadRef CreateRunnableThread();

    static void Sleep(float seconds);

    //信号量 可跨进程，多占有////////////////////////////////////////////////////////////////////////////////////////////////////////
	static SemaphoreRef CreateSemaphore();

    //事件 可跨进程，用于同步////////////////////////////////////////////////////////////////////////////////////////////////////////
    static EventRef CreateSyncEvent(bool manualReset = false);	//TODO池化

    //临界区 单进程多线程，单占有////////////////////////////////////////////////////////////////////////////////////////////////////////
    static CriticalSectionRef CreateCriticalSection();	

    //TODO 互斥量 可跨进程，单占有////////////////////////////////////////////////////////////////////////////////////////////////////////
};