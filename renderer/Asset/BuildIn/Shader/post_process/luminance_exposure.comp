#version 460

layout(set = 0, binding = 0, rgba16f) uniform image2D IN_COLOR;

struct ExposureSetting
{             
    float minLog2Luminance;             //最小亮度，对数
    float inverseLuminanceRange;        //亮度范围，对数倒数
    float luminanceRange;               //亮度范围，对数
    float numPixels;                    //总像素数
    float timeCoeff;                    //时间加权
    float _padding[3];
};
layout(set = 0, binding = 1) buffer EXPOSURE_DATA
{
    ExposureSetting setting;     
    float luminance;                     // 计算得到的平均亮度
    float adaptedLuminance;              // 多帧渐进的亮度
    float _padding[2];   
    uint histogramBuffer[256];           // 直方图数组 
    uint readBackHistogramBuffer[256];   // 回读用的数组 
};

shared uint HistogramShared[256];

#define THREAD_SIZE_X 256
#define THREAD_SIZE_Y 1
#define THREAD_SIZE_Z 1
layout (local_size_x = THREAD_SIZE_X, 
		local_size_y = THREAD_SIZE_Y, 
		local_size_z = THREAD_SIZE_Z) in;
void main() 
{
    // Get the count from the histogram buffer
    uint countForThisBin = histogramBuffer[gl_LocalInvocationIndex];
    HistogramShared[gl_LocalInvocationIndex] = countForThisBin * gl_LocalInvocationIndex;     //统计平均亮度时使用的直方图，数目x级数

    barrier();

    // Reset the count stored in the buffer in anticipation of the next pass
    readBackHistogramBuffer[gl_LocalInvocationIndex] = histogramBuffer[gl_LocalInvocationIndex];
    histogramBuffer[gl_LocalInvocationIndex] = 0;

    // This loop will perform a weighted count of the luminance range
    for (uint cutoff = (256 >> 1); cutoff > 0; cutoff >>= 1) {                         //迭代处理，每轮将一个对数级的数据加到上一级去，直至加到0级
        if (uint(gl_LocalInvocationIndex) < cutoff) {
        HistogramShared[gl_LocalInvocationIndex] += HistogramShared[gl_LocalInvocationIndex + cutoff];
        }

        barrier();  
    }

    // We only need to calculate this once, so only a single thread is needed.
    if (gl_LocalInvocationIndex == 0) {
        // Here we take our weighted sum and divide it by the number of pixels
        // that had luminance greater than zero (since the index == 0, we can
        // use countForThisBin to find the number of black pixels)
        float weightedLogAverage = (HistogramShared[0] / max(setting.numPixels - float(countForThisBin), 1.0)) - 1.0;   //求和后除以有亮度的像素总数，映射回[0,254]

        // Map from our histogram space to actual luminance
        float weightedAvgLum = exp2(((weightedLogAverage / 254.0) * setting.luminanceRange) + setting.minLog2Luminance);  //映射回真实的平均亮度

        // The new stored value will be interpolated using the last frames value
        // to prevent sudden shifts in the exposure.
        float lumLastFrame = adaptedLuminance;
        float adaptedLum = lumLastFrame + (weightedAvgLum - lumLastFrame) * setting.timeCoeff;          //与前帧的亮度做个加权过渡

        luminance = weightedAvgLum;
        adaptedLuminance = adaptedLum;
    }
}