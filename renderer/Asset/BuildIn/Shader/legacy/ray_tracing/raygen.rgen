#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "../include/common.glsl"

//layout(set = 1, binding = 1, rgba8) uniform image2D image;
layout(set = 1, binding = 0, rgba16) uniform image2D image;

layout(location = 0) rayPayloadEXT vec3 hitValue;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = CAMERA.inv_view * vec4(0,0,0,1);
	vec4 target = CAMERA.inv_proj * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = CAMERA.inv_view * vec4(normalize(target.xyz), 0) ;

	float tmin = 0.001;
	float tmax = 10000.0;

    hitValue = vec3(0.0);

	traceRayEXT(TLAS, 			// acceleration structure
          gl_RayFlagsOpaqueEXT,       	// rayFlags
          0xFF,           				// cullMask
          0,              				// sbtRecordOffset
          0,              				// sbtRecordStride
          0,              				// missIndex
          origin.xyz,     				// ray origin
          tmin,           				// ray min range
          direction.xyz,  				// ray direction
          tmax,           				// ray max range
          0               				// payload (location = 0)
  );

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));
}
