#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "../include/common.glsl"
#include "common_volumetric_fog.glsl"

#define PI 3.1415926

// Beer–Lambert law 光线穿透率，与传输距离成指数关系
// 此处假设介质均匀，若不均匀则转为对多段传输距离分别计算穿透率，相乘即可
float transmittance(vec3 worldPos, vec3 cameraPos, float attenuation)
{
    return exp(-distance(worldPos.xyz, cameraPos.xyz) * attenuation);
}

// 相位函数，光被散射到各方向的分布函数
// 各向异性近似
float henyeyGreensteinPhase(float G, float CosTheta)
{
    // Reference implementation (i.e. not schlick approximation). 
    // See http://www.pbr-book.org/3ed-2018/Volume_Scattering/Phase_Functions.html
    float Numer = 1.0f - G * G;
    float Denom = max(0.001,1.0f + G * G - 2.0f * G * CosTheta);
    return Numer / (4.0f * PI * Denom * sqrt(Denom));
}

// 各向同性
float isotropicScattering()
{
    return 1.0f / (4 * PI);
}


layout(set = 1, binding = 0, rgba16f) uniform image3D VOLUMETRIC_FOG_RAW;				//未计算积分时的体素纹理
layout(set = 1, binding = 1, rgba16f) uniform image3D VOLUMETRIC_FOG_RAW_HISTORY;		//未计算积分时的历史帧
layout(set = 1, binding = 2, rgba16f) uniform image3D VOLUMETRIC_FOG_INTEGRAL;			//积分体素纹理
layout(set = 1, binding = 3, rgba16f) uniform image2D VOLUMETRIC_FOG_IMG;				//最终画面的平铺2D纹理

layout(push_constant) uniform volumetricFogSetting {
	bool  isotropic;
	float henyey_greenstein_G;
	float attenuation_factor;	// 衰减系数 = 外散射系数 + 吸收率
	float scattering_intencity;
	float blend_factor;
	float indirect_light_intencity;
} VolumetricFogSetting;

#define THREADS_X VOLUMETRIC_FOG_SIZE_X / 10	
#define THREADS_Y VOLUMETRIC_FOG_SIZE_Y / 10	
#define THREADS_Z 1	




layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = THREADS_Z) in;
void main() 
{
	// 阶段一 收集各视锥体素的光照信息
	// 如果做区域性的烟雾，还需要添加一轮获取介质信息的pass
	ivec3 gID = ivec3(gl_GlobalInvocationID.xyz);
	if(gID.x >= VOLUMETRIC_FOG_SIZE_X || gID.y >= VOLUMETRIC_FOG_SIZE_Y || gID.z >= VOLUMETRIC_FOG_SIZE_Z) return;

    vec3 noise          = fetchNoise3D(gID.xy);
    float totalTickTime = fract(GLOBAL_SETTING.totalTickTime / 2);
    vec3 ditter = vec3(	random(vec2(noise.x + totalTickTime + gID.x)),
						random(vec2(noise.y + totalTickTime + gID.y)),
						random(vec2(noise.z + totalTickTime + gID.z)));    
	ditter = Saturate(ditter);				

	vec4 worldPos 			= fetchVolumetricClusterPos(gID + ditter);
	vec4 worldPosNoDitter 	= fetchVolumetricClusterPos(gID);
	vec4 worldNearPos 		= vec4(CAMERA.pos.xyz + normalize(CAMERA.front) * CAMERA.near_far.x, 1.0f);

	vec3 V 					= normalize(CAMERA.pos.xyz - worldPos.xyz);	        //视线

	vec3 accumulateColor = vec3(0.0f);
	float transmittance = transmittance(worldPosNoDitter.xyz, worldNearPos.xyz, VolumetricFogSetting.attenuation_factor);	//计算穿透率就不加抖动了

	// 点光源
	{
		ivec3 clusterID     = fetchLightClusterID(worldToNdc(worldPos).xyz);
		uvec2 clusterIndex  = fetchLightClusterIndex(clusterID);

		for(uint i = clusterIndex.x; i < clusterIndex.x + clusterIndex.y; i++)
		{
			PointLight pointLight = LIGHT.pointLights[LIGHT_INDEX.slot[i].index];

			vec3 L 											= normalize(pointLight.pos - worldPos.xyz);
			float VoL 										= dot(V, L);
			float scattering								= isotropicScattering();
			if(!VolumetricFogSetting.isotropic) scattering 	= henyeyGreensteinPhase(VolumetricFogSetting.henyey_greenstein_G, VoL);
			scattering *= pointLight.fog_scattering;

			float pointDistance = length(worldPos.xyz - pointLight.pos.xyz);
			float pShadow = pointShadow(pointLight, worldPos.xyz, true);  

			float attenuation   = pointLightFalloff(pointDistance, pointLight.near_far_bias[1]);

			vec3 radiance     = pShadow * pointLight.color_intencity.a * pointLight.color_intencity.rgb * attenuation; 

			accumulateColor += radiance * scattering * VolumetricFogSetting.scattering_intencity;
			//accumulateColor += pointShadow * attenuation;
			//accumulateColor += pointShadow;
		}
	}

	// 平行光源
	{
		DirectionalLight dirLight = LIGHT.directionalLights[0];

		vec3 L 											= -normalize(dirLight.dir);
		float VoL 										= dot(V, L);
		float scattering								= isotropicScattering();
		if(!VolumetricFogSetting.isotropic) scattering 	= henyeyGreensteinPhase(VolumetricFogSetting.henyey_greenstein_G, VoL);
		scattering *= dirLight.fog_scattering;

		float dirShadow = directionalShadow(worldPos.xyz, true);           

		vec3 radiance = dirShadow * 
							dirLight.color_intencity.a * 
							dirLight.color_intencity.rgb;

		accumulateColor += radiance * scattering * VolumetricFogSetting.scattering_intencity;
	}

	//TODO 添加间接光照
	// if(VolumetricFogSetting.indirect_light_intencity >= 0.01f)
	// {
	// 	for(int i = 0; i < LIGHT.lightSetting.volume_light_cnt; i++)
	// 	{
	// 		VolumeLight volumeLight = LIGHT.volumeLights[i];
	// 		if(	volumeLight.setting.enable &&
	// 			PointIntersectBox(worldPos.xyz, volumeLight.setting.box))    //需要在包围盒范围内
	// 		{
	// 			// indirectIrradiance  = fetchIrradiance(volumeLight.setting, worldPos, N, V, VOLUME_LIGHT_IRRADIANCE_SAMPLERS[i], VOLUME_LIGHT_DEPTH_SAMPLERS[i]);
	// 			// vec3 diffuse = indirectIrradiance * albedo.rgb;
	// 			// vec3 diffuseColor = kD * diffuse;    

	// 			// indirectColor = diffuseColor * ao;

	// 			// break;  //暂时只用一个的，没处理重叠情况
	// 		}
	// 	}
	// }


	imageStore(VOLUMETRIC_FOG_RAW, ivec3(gID.xyz), vec4( accumulateColor, transmittance ) );
}



