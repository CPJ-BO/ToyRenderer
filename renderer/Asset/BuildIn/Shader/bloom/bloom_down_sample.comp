#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "../common/screen.glsl"

layout(set = 0, binding = 0) uniform texture2D IN_COLOR[];
layout(set = 0, binding = 1, rgba16f) uniform image2D OUT_COLOR;
layout(set = 1, binding = 0) uniform sampler SAMPLER[];

layout(push_constant) uniform bloom_setting {
	int maxMip;
	int mipLevel;
	float stride;
	float bias;
	float accumulateIntencity;
	float combineIntencity;
} BLOOM_SETTING;

vec3 Box4x4(vec3 s0, vec3 s1, vec3 s2, vec3 s3) {
	return (s0 + s1 + s2 + s3) * 0.25;
}

vec3 Filter(texture2D tex, sampler sampl, vec2 uv, vec2 stride)
{
	// see SIGGRAPH 2014: Advances in Real-Time Rendering
	//     "Next Generation Post-Processing in Call of Duty Advanced Warfare"
	//      Jorge Jimenez
	vec3 c = texture(sampler2D(tex, sampl), uv).rgb;

	// The offsets below are in "source" texture space
	vec3 lt  = texture(sampler2D(tex, sampl), uv + ivec2(-1, -1) * stride).rgb;
	vec3 rt  = texture(sampler2D(tex, sampl), uv + ivec2( 1, -1) * stride).rgb;
	vec3 rb  = texture(sampler2D(tex, sampl), uv + ivec2( 1,  1) * stride).rgb;
	vec3 lb  = texture(sampler2D(tex, sampl), uv + ivec2(-1,  1) * stride).rgb;

	vec3 lt2 = texture(sampler2D(tex, sampl), uv + ivec2(-2, -2) * stride).rgb;
	vec3 rt2 = texture(sampler2D(tex, sampl), uv + ivec2( 2, -2) * stride).rgb;
	vec3 rb2 = texture(sampler2D(tex, sampl), uv + ivec2( 2,  2) * stride).rgb;
	vec3 lb2 = texture(sampler2D(tex, sampl), uv + ivec2(-2,  2) * stride).rgb;

	vec3 l   = texture(sampler2D(tex, sampl), uv + ivec2(-2,  0) * stride).rgb;
	vec3 t   = texture(sampler2D(tex, sampl), uv + ivec2( 0, -2) * stride).rgb;
	vec3 r   = texture(sampler2D(tex, sampl), uv + ivec2( 2,  0) * stride).rgb;
	vec3 b   = texture(sampler2D(tex, sampl), uv + ivec2( 0,  2) * stride).rgb;

	// five h4x4 boxes
	vec3 c0, c1;

	// common case
	c0  = Box4x4(lt, rt, rb, lb);
	c1  = Box4x4(c, l, t, lt2);
	c1 += Box4x4(c, r, t, rt2);
	c1 += Box4x4(c, r, b, rb2);
	c1 += Box4x4(c, l, b, lb2);

	// weighted average of the five boxes
	return c0 * 0.5 + c1 * 0.125;
}

#define THREAD_SIZE_X 16
#define THREAD_SIZE_Y 16
#define THREAD_SIZE_Z 1
layout (local_size_x = THREAD_SIZE_X, 
		local_size_y = THREAD_SIZE_Y, 
		local_size_z = THREAD_SIZE_Z) in;
void main()
{
    ivec2 pixel         = ivec2(gl_GlobalInvocationID.xy);									// 本级像素坐标
    vec2 uv             = ScreenPixToUV(pixel, imageSize(OUT_COLOR));						// UV
	if(uv.x > 1 || uv.y > 1) return;

	vec2 texOffset      = 1.0 / textureSize(IN_COLOR[0], 0) * BLOOM_SETTING.stride;			// 下采样mip的上一级的步长
	vec3 mipmapColor    = Filter(IN_COLOR[0], SAMPLER[0], uv, texOffset);

    imageStore(OUT_COLOR, pixel, vec4(mipmapColor, 1.0));
}