#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "../common/screen.glsl"

layout(set = 0, binding = 0) uniform texture2D IN_COLOR[];
layout(set = 0, binding = 1, rgba16f) uniform image2D OUT_COLOR;
layout(set = 1, binding = 0) uniform sampler SAMPLER[];

layout(push_constant) uniform bloom_setting {
	int maxMip;
	int mipLevel;
	float stride;
	float bias;
	float accumulateIntencity;
	float combineIntencity;
} BLOOM_SETTING;

// //const float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

// const float kernel5x5[25] = float[](0.002915, 0.013064, 0.021539, 0.013064, 0.002915,
// 									0.013064, 0.058550, 0.096532, 0.058550, 0.013064,
// 									0.021539, 0.096532, 0.159155, 0.096532, 0.021539,
// 									0.013064, 0.058550, 0.096532, 0.058550, 0.013064,
// 									0.002915, 0.013064, 0.021539, 0.013064, 0.002915);

// const float kernel3x3[9] = float[](	0.058550, 0.096532, 0.058550,
// 									0.096532, 0.159155, 0.096532,
// 									0.058550, 0.096532, 0.058550);

// float GaussWeight2D(float x, float y, float sigma)
// {
// 	float PI = 3.14159265358;
// 	float E = 2.71828182846;
// 	float sigma_2 = pow(sigma, 2);

// 	float a = -(x*x + y*y) / (2 * sigma_2);

// 	return pow(E, a) / (2.0 * PI * sigma_2);
// }

// vec3 GaussNxN(sampler2D tex, vec2 uv, int n, vec2 stride, float sigma, float mip)
// {
// 	vec3 color = vec3(0.0);
// 	int r = n/2;
// 	float weight = 0.0;

// 	for(int i = -r; i <= r; i++)
// 	{
// 		for(int j = -r; j <= r; j++)
// 		{
// 			//float w = GaussWeight2D(i, j, sigma);
// 			//float w = kernel3x3[3 * (i+r) + (j+r)];
// 			float w = kernel5x5[5 * (i+r) + (j+r)];
// 			vec2 coord = uv + vec2(i, j) * stride;
// 			color += textureLod(tex, coord, mip).rgb * w;
// 			weight += w;
// 		}
// 	}

// 	color /= weight;

// 	return color;
// }

vec3 LowFilter(texture2D tex, sampler sampl, vec2 uv, vec2 stride, float mip)
{
	// see SIGGRAPH 2014: Advances in Real-Time Rendering
	//     "Next Generation Post-Processing in Call of Duty Advanced Warfare"
	//      Jorge Jimenez
	const float radius = 1.0;
	vec4 d = vec4(stride, -stride) * radius;

	vec3 c;
	c  = textureLod(sampler2D(tex, sampl), uv + d.zw, mip).rgb;
	c += textureLod(sampler2D(tex, sampl), uv + d.xw, mip).rgb;
	c += textureLod(sampler2D(tex, sampl), uv + d.xy, mip).rgb;
	c += textureLod(sampler2D(tex, sampl), uv + d.zy, mip).rgb;

	return c * 0.25;
}

vec3 Filter(texture2D tex, sampler sampl, vec2 uv, vec2 stride, float mip)
{
	// see SIGGRAPH 2014: Advances in Real-Time Rendering
	//     "Next Generation Post-Processing in Call of Duty Advanced Warfare"
	//      Jorge Jimenez
	const float radius = 1.0;
	vec4 d = vec4(stride, -stride) * radius;
	vec3 c0, c1;
	c0  = textureLod(sampler2D(tex, sampl), uv + d.zw, mip).rgb;
	c0 += textureLod(sampler2D(tex, sampl), uv + d.xw, mip).rgb;
	c0 += textureLod(sampler2D(tex, sampl), uv + d.xy, mip).rgb;
	c0 += textureLod(sampler2D(tex, sampl), uv + d.xy, mip).rgb;
	c0 += textureLod(sampler2D(tex, sampl), uv + d.zy, mip).rgb;
	c0 += 4.0 * textureLod(sampler2D(tex, sampl), uv, mip).rgb;
	c1  = textureLod(sampler2D(tex, sampl), uv + vec2(d.z,  0.0), mip).rgb;
	c1 += textureLod(sampler2D(tex, sampl), uv + vec2(0.0,  d.w), mip).rgb;
	c1 += textureLod(sampler2D(tex, sampl), uv + vec2(d.x,  0.0), mip).rgb;
	c1 += textureLod(sampler2D(tex, sampl), uv + vec2( 0.0, d.y), mip).rgb;

	return (c0 + 2.0 * c1) * (1.0 / 16.0);
}

#define THREAD_SIZE_X 16
#define THREAD_SIZE_Y 16
#define THREAD_SIZE_Z 1
layout (local_size_x = THREAD_SIZE_X, 
		local_size_y = THREAD_SIZE_Y, 
		local_size_z = THREAD_SIZE_Z) in;
void main()
{
    ivec2 pixel         = ivec2(gl_GlobalInvocationID.xy);											// 本级像素坐标
    vec2 uv             = ScreenPixToUV(pixel, imageSize(OUT_COLOR));								// UV
	if(uv.x > 1 || uv.y > 1) return;

	float inIndex       = BLOOM_SETTING.mipLevel + BLOOM_SETTING.bias;

	vec2 texOffsetLast  = 1.0 / textureSize(IN_COLOR[0], 0) * BLOOM_SETTING.stride;					// 上采样mip的下一级的步长
	vec2 texOffsetMip   = 1.0 / textureSize(IN_COLOR[1], int(inIndex))  * BLOOM_SETTING.stride;		// 下采样mip的步长

	vec3 lastColor      = Filter(IN_COLOR[0], SAMPLER[0], uv, texOffsetLast, 0);
	vec3 mipmapColor    = Filter(IN_COLOR[1], SAMPLER[0], uv, texOffsetMip, inIndex);
	if(BLOOM_SETTING.maxMip - BLOOM_SETTING.mipLevel == 1)	lastColor = vec3(0.0f);					// 如果是倒数第二层，最后一层的采样结果直接取0

	vec4 outColor       = vec4((mipmapColor + lastColor) / 2.0 * BLOOM_SETTING.accumulateIntencity, 1.0);
    imageStore(OUT_COLOR, pixel, outColor);
}