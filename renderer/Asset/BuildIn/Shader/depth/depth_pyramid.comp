#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_samplerless_texture_functions : enable

layout(set = 0, binding = 0) uniform texture2D LAST_MIP;
layout(set = 0, binding = 1, r32f) uniform image2D CURRENT_MIP;

layout(push_constant) uniform depth_pyramid_setting {
    uint mode;
	uint mipLevel;
}DEPTH_PYRAMID_SETTING;

#define THREAD_SIZE_X 16
#define THREAD_SIZE_Y 16
#define THREAD_SIZE_Z 1
layout (local_size_x = THREAD_SIZE_X, 
		local_size_y = THREAD_SIZE_Y, 
		local_size_z = THREAD_SIZE_Z) in;
void main() 
{
	if(DEPTH_PYRAMID_SETTING.mipLevel == 0)	// 第一层是拷贝
	{
		float result = texelFetch(LAST_MIP, ivec2(gl_GlobalInvocationID.xy), 0).r;

		imageStore(CURRENT_MIP, ivec2(gl_GlobalInvocationID.xy), vec4(result, 0, 0, 0));
	}
	else
	{
		ivec2 position00 = ivec2(gl_GlobalInvocationID.xy) * 2;
		ivec2 position01 = position00 + ivec2(0, 1);
		ivec2 position10 = position00 + ivec2(1, 0);
		ivec2 position11 = position00 + ivec2(1, 1);

		float color00 = texelFetch(LAST_MIP, position00, 0).r;
		float color01 = texelFetch(LAST_MIP, position01, 0).r;
		float color10 = texelFetch(LAST_MIP, position10, 0).r;
		float color11 = texelFetch(LAST_MIP, position11, 0).r;

		float result;
		if(DEPTH_PYRAMID_SETTING.mode == 1) result = max(max(max(color00, color01), color10), color11);
		else							  	result = min(min(min(color00, color01), color10), color11);

		imageStore(CURRENT_MIP, ivec2(gl_GlobalInvocationID.xy), vec4(result, 0, 0, 0));
	}
}
