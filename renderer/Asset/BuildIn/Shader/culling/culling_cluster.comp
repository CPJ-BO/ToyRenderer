#version 460
#extension GL_GOOGLE_include_directive : enable

#include "../common/common.glsl"

struct RHIIndexedIndirectCommand 
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

struct RHIIndirectCommand 
{
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
};

struct IndirectSetting
{
    uint processSize;              
    uint pipelineStateSize;        
    uint _padding0[2];

    uint drawSize;                
    uint frustumCull;             
    uint occlusionCull;          
    uint _padding1;
};

struct IndirectMeshDrawInfo
{
    uint objectID;			      
    uint commandID;				   
};

struct IndirectClusterDrawInfo
{
    uint objectID;                 
    uint clusterID;              
    uint commandID;				    
    uint _padding;
};

struct IndirectClusterGroupDrawInfo 
{
    uint objectID;                 
    uint clusterGroupID;           
    uint commandID;				    
    uint _padding;
};

layout(set = 1, binding = 0) buffer IndirectMeshDrawDatas { 

    IndirectSetting setting;
    IndirectMeshDrawInfo draws[MAX_PER_FRAME_OBJECT_SIZE];	

} MESH_DRAW_DATAS[];

layout(set = 1, binding = 1) buffer IndirectMeshDrawCommands { 

    RHIIndirectCommand commands[MAX_PER_FRAME_OBJECT_SIZE];

} MESH_DRAW_COMMANDS[];

layout(set = 1, binding = 2) buffer IndirectClusterDrawDatas { 

    IndirectSetting setting;
    IndirectClusterDrawInfo draws[MAX_PER_FRAME_CLUSTER_SIZE];

} CLUSTER_DRAW_DATAS[];

layout(set = 1, binding = 3) buffer IndirectClusterDrawCommands			           
{
    RHIIndirectCommand command[MAX_PER_PASS_PIPELINE_STATE_COUNT];	 
                                                        
} CLUSTER_DRAW_COMMANDS[];

layout(set = 1, binding = 4) buffer IndirectClusterGroupDrawDatas
{
    IndirectSetting setting;
    IndirectClusterGroupDrawInfo draws[MAX_PER_FRAME_CLUSTER_GROUP_SIZE];
		    
} CLUSTER_GROUP_DRAW_DATAS[];

layout(set = 1, binding = 5) buffer CullingSetting
{
	uint processSize;
	uint _padding[3];

	uint passType [MAX_SUPPORTED_MESH_PASS_COUNT];
	uint passOffset [MAX_SUPPORTED_MESH_PASS_COUNT];
};

#define DEPTH_PASS_INDEX 0
#define POINT_SHADOW_PASS_INDEX 1
#define DIRECTIONAL_SHADOW_PASS_INDEX 2
#define G_BUFFER_PASS_INDEX 3
#define FORWARD_PASS_INDEX 4
#define TRANSPARENT_PASS_INDEX 5

#define THREAD_SIZE_X 256
#define THREAD_SIZE_Y 1
#define THREAD_SIZE_Z 1
layout (local_size_x = THREAD_SIZE_X, 
		local_size_y = THREAD_SIZE_Y, 
		local_size_z = THREAD_SIZE_Z) in;
void main() 
{
	uint gID = gl_GlobalInvocationID.x;

	// 逐cluster剔除
	for(int i = 0; i < processSize; i++)
	{
		if(gID < CLUSTER_DRAW_DATAS[i].setting.processSize)
		{
			IndirectClusterDrawInfo clusterInfo = CLUSTER_DRAW_DATAS[i].draws[gID];

			MeshCluster cluster = MESH_CLUSTERS.slot[clusterInfo.clusterID];
			Object object = OBJECTS.slot[clusterInfo.objectID];
			
			BoundingSphere world_sphere = SphereTransform(cluster.sphere, object.model);	//世界空间的包围球包围盒,是cluster的不是object的

			bool visible = true;			//整体可见性
			bool frustum_visible = true;	//视锥剔除可见性
			bool occlusion_visible = true;	//遮蔽剔除可见性
	
			//屏幕空间绘制
			if(	passType[i] == DEPTH_PASS_INDEX ||
				passType[i] == G_BUFFER_PASS_INDEX ||
				passType[i] == FORWARD_PASS_INDEX ||
				passType[i] == TRANSPARENT_PASS_INDEX)
			{
				frustum_visible = frustum_visible && FrustumIntersectSphere(CAMERA.frustum, world_sphere);

				occlusion_visible = occlusion_visible && OcclusionCull( 			//遮蔽剔除使用前一帧的深度缓冲Hiz
					world_sphere, 
					CAMERA.pos.xyz, CAMERA.view, CAMERA.proj, CAMERA.near,
					DEPTH_PYRAMID[1], SAMPLER[3]); 
			}

			//光源空间绘制，平行光
			if(passType[i] == DIRECTIONAL_SHADOW_PASS_INDEX)
			{			
				// frustum_visible = frustum_visible && FrustumIntersectSphere(LIGHTS.directionalLights[passOffset[i]].frustum, world_sphere);
				frustum_visible = frustum_visible && SphereIntersectSphere(LIGHTS.directionalLights[passOffset[i]].sphere, world_sphere);
			}

			//光源空间绘制，点光源
			if(passType[i] == POINT_SHADOW_PASS_INDEX)
			{
				if(passOffset[i] >= LIGHTS.lightSetting.pointshadowedLightCnt)	visible = false;	//没启用的点光源槽位
				else frustum_visible = frustum_visible && SphereIntersectSphere(world_sphere, LIGHTS.pointLights[LIGHTS.lightSetting.pointShadowLightIDs[passOffset[i]]].sphere);
			}
			
			//TODO INDIRECT_COMMANDS可以放到这里来录制，不只是instanceCount

			visible = visible && occlusion_visible && frustum_visible;
			// visible = true;	// 
			
			atomicAdd(CLUSTER_DRAW_DATAS[i].setting.drawSize, visible ? 1 : 0);						//存一下剔除的数量信息
			atomicAdd(CLUSTER_DRAW_DATAS[i].setting.frustumCull, frustum_visible ? 0 : 1);
			atomicAdd(CLUSTER_DRAW_DATAS[i].setting.occlusionCull, occlusion_visible ? 0 : 1);
		
			if(visible) 
			{
				uint offset = atomicAdd(CLUSTER_DRAW_COMMANDS[i].command[clusterInfo.commandID].instanceCount, 1);	// 更新command和缓冲

				MeshClusterDrawInfo drawInfo; 
				drawInfo.objectID = clusterInfo.objectID;
				drawInfo.clusterID = clusterInfo.clusterID;		

				MESH_CLUSTER_DRAW_INFOS.slot[
					CLUSTER_DRAW_COMMANDS[i].command[
						clusterInfo.commandID].firstInstance + offset] = drawInfo;
			}
		}
	}
}



