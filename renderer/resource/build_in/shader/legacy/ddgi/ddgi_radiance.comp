#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "../include/common.glsl"

#include "ddgi_layout.glsl"

layout(push_constant) uniform ComputeSetting {
	int volume_light_id;
	float _padding[3];
} computeSetting;

#define THREADS_X 32
#define THREADS_Y 32
#define THREADS_Z 1


layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = THREADS_Z) in;
void main() 
{
    // 第一轮 计算辐射率
    VolumeLight volumeLight = LIGHT.volumeLights[computeSetting.volume_light_id];
    
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);
    int   probe_index = pixel_coord.y;
    int   ray_index   = pixel_coord.x;

    ivec3 probe_coord = fetchProbeCoord(volumeLight.setting, probe_index);
    vec3  origin      = fetchProbeWorldPos(volumeLight.setting, probe_coord);

    vec4 dir_dist   = imageLoad(G_BUFFER_POS_TEXTURE,      pixel_coord);
    vec4 normal     = imageLoad(G_BUFFER_NORMAL_TEXTURE,   pixel_coord);
    vec4 albedo     = imageLoad(G_BUFFER_ALBEDO_TEXTURE,   pixel_coord);
    vec4 emission   = imageLoad(G_BUFFER_EMISSION_TEXTURE, pixel_coord);

    vec3 direction  = dir_dist.xyz;
    float dist      = dir_dist.w;
    float roughness = normal.w;     //粗糙度
    float metallic  = albedo.w;     //金属度

    vec3 radiance   = vec3(0.0f);   //漫反射辐射率

    // 光照计算
    if(dist < MAX_HIT_DIST && length(normal.xyz) > 0.01)
    {
        //光照计算相关向量////////////////////////////////////////////////////////////////////////////////////////////////////////

        vec3 worldPos = origin + direction * dist;                  //相对坐标到绝对世界坐标
        vec3 viewPos = (CAMERA.view * vec4(worldPos, 1.0f)).xyz;    //仅在采样CSM使用

        vec3 N = normalize(normal.xyz);	                //法线
        vec3 V = normalize(-direction);	                //视线，此处的视线原点是探针位置
        vec3 R = normalize(reflect(-V, N));             //反射

        float a2 = pow(roughness, 4) ;                                              //粗糙度

        vec3 F0 = vec3(0.04f);                                                      //菲涅尔反射率，表征对不同波长光的折射差异（也就是镜面反射颜色）
        F0 = mix(F0, albedo.rgb, metallic);

        //直接光照计算////////////////////////////////////////////////////////////////////////////////////////////////////////

        vec3 dirctLightColor = 
            directLight(
            albedo.xyz, F0, roughness, metallic,
            vec4(worldPos, 1.0f), N, V,
            true, true);

        //间接光照计算////////////////////////////////////////////////////////////////////////////////////////////////////////

        vec3 indirctLightColor = 
            indirectLight(
            albedo.xyz, F0, roughness, metallic,
            vec4(worldPos, 1.0f), N, V);

        //合并////////////////////////////////////////////////////////////////////////////////////////////////////////
        radiance = dirctLightColor + indirctLightColor;
        radiance += emission.xyz;
    }
    else if(dist == MAX_HIT_DIST)
    {
        radiance = albedo.xyz;  //天光
    }

    imageStore(RADIANCE_TEXTURE, pixel_coord, vec4(radiance, 0.0f));
}



