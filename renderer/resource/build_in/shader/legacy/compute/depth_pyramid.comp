#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "../include/common.glsl"

layout(set = 1, binding = 0) uniform sampler2D LAST_MIP;
layout(set = 1, binding = 1, r32f) uniform image2D CURRENT_MIP;

layout(push_constant) uniform depthPyramidSetting {
    float mode;
}DepthPyramidSetting;

#define THREADS_X 8
#define THREADS_Y 8
#define THREADS_Z 1

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = THREADS_Z) in;
void main() {
	ivec2 texel_position00 = ivec2( gl_GlobalInvocationID.xy ) * 2;
	ivec2 texel_position01 = texel_position00 + ivec2(0, 1);
	ivec2 texel_position10 = texel_position00 + ivec2(1, 0);
	ivec2 texel_position11 = texel_position00 + ivec2(1, 1);

	float color00 = texelFetch( LAST_MIP, texel_position00, 0 ).r;
	float color01 = texelFetch( LAST_MIP, texel_position01, 0 ).r;
	float color10 = texelFetch( LAST_MIP, texel_position10, 0 ).r;
	float color11 = texelFetch( LAST_MIP, texel_position11, 0 ).r;

	float result;
	if(DepthPyramidSetting.mode == 0) result = max( max( max( color00, color01 ), color10 ), color11 );
	else							  result = min( min( min( color00, color01 ), color10 ), color11 );

	imageStore( CURRENT_MIP, ivec2( gl_GlobalInvocationID.xy ), vec4( result, 0, 0, 0 ) );

	//groupMemoryBarrier();
	//barrier();
}
