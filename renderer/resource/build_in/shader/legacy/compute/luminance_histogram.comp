#version 460

#define GROUP_SIZE 256
#define THREADS_X 16
#define THREADS_Y 16

#define EPSILON 0.005
#define RGB_TO_LUM vec3(0.2125, 0.7154, 0.0721) // Taken from RTR vol 4 pg. 278

// https://bruop.github.io/exposure/

layout (set = 0, binding = 0) uniform sampler2D TextureBuffer;

layout(set = 0, binding = 1) buffer storageBuffer
{
  float min_log2_luminance;       //最小亮度，对数
  float inverse_luminance_range;  //亮度范围，对数倒数
  float luminance_range;          //亮度范围，对数
  float num_pixels;               //总像素数
  float time_coeff;               //时间加权

  float luminance;                 //计算得到的平均亮度

  uint histogram_buffer[];         //直方图数组
} ;

shared uint HistogramShared[GROUP_SIZE];

// For a given color and luminance range, return the histogram bin index
uint colorToBin(vec3 hdrColor, float minLogLum, float inverseLogLumRange) {
  // Convert our RGB value to Luminance, see note for RGB_TO_LUM macro above
  float lum = dot(hdrColor, RGB_TO_LUM);

  // Avoid taking the log of zero
  if (lum < EPSILON) {
    return 0;
  }

  // Calculate the log_2 luminance and express it as a value in [0.0, 1.0]
  // where 0.0 represents the minimum luminance, and 1.0 represents the max.
  float logLum = clamp((log2(lum) - minLogLum) * inverseLogLumRange, 0.0, 1.0);

  // Map [0, 1] to [1, 255]. The zeroth bin is handled by the epsilon check above.
  return uint(logLum * 254.0 + 1.0);
}

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;
void main() {

  //线程数为16x16，正好用256级的直方图
  //线程组使用一个shared内存存统计数据，每个线程先清空，再分别采样单个像素写入内存，最后每个线程负责一块shared内存到storage buffer的存储

  // Initialize the bin for this thread to 0
  HistogramShared[gl_LocalInvocationIndex] = 0;
  barrier();


  uvec2 dim = textureSize(TextureBuffer, 0).xy;

  // Ignore threads that map to areas beyond the bounds of our HDR image
  if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) {

    vec3 hdrColor = texture(TextureBuffer, vec2(gl_GlobalInvocationID.xy) / dim).xyz;
    uint binIndex = colorToBin(hdrColor, min_log2_luminance, inverse_luminance_range);
    // We use an atomic add to ensure we don't write to the same bin in our
    // histogram from two different threads at the same time.
    atomicAdd(HistogramShared[binIndex], 1);
  }

  // Wait for all threads in the work group to reach this point before adding our
  // local histogram to the global one
  barrier();

  // Technically there's no chance that two threads write to the same bin here,
  // but different work groups might! So we still need the atomic add.
  atomicAdd(histogram_buffer[gl_LocalInvocationIndex], HistogramShared[gl_LocalInvocationIndex]);

  //atomicAdd(histogram_buffer[gl_LocalInvocationIndex], dim.x);
}